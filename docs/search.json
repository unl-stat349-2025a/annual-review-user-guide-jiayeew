[
  {
    "objectID": "topic.html",
    "href": "topic.html",
    "title": "Appendix A — Topic: Visual Pattern Recognition",
    "section": "",
    "text": "Defination of what is visual pattern recognition\nAn overiview of Facial Recognition\n\n\nExplain what is Facial Recognition\nApplications\n\n\nComparison software packages & libraries\n\n\nOpenCV:\nTensorFlow/Keras\nScikit-learn:\nComparison: Performance, dataset requirements, ease of implementation, and computational efficiency.\n\n\nChoosing the right approach\n\n\nWhen to use deep learning vs. traditional computer vision techniques\nChoosing the best model based on dataset size, computational resources, and accuracy needs.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Topic: Visual Pattern Recognition</span>"
    ]
  },
  {
    "objectID": "guide.html",
    "href": "guide.html",
    "title": "1  Facial Recognition User Guide",
    "section": "",
    "text": "1.1 Prerequisite\nCompared to 20 years ago, the field of Artificial Intelligence has significantly transformed how machines can be used and the industries to which they can be applied. One of the key applications of AI in this area is computer vision. This guide will introduce you to the fundamentals of computer vision, with a special focus on facial recognition, and help you choose the most effective tools and approaches for your projects.\nBasic understanding of machine learning, deep learning concepts, and some experience with Python is preferred to fully grasp this user guide.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Facial Recognition User Guide</span>"
    ]
  },
  {
    "objectID": "needs.html",
    "href": "needs.html",
    "title": "Appendix B — Needs Assessment",
    "section": "",
    "text": "What does someone trying to accomplish your chosen task need help with? - Understanding the basics of of visual pattern recognition and how it applies to facial recognition. - Selecting the right software package or library - Choosing between traditional computer vision and deep learning models - Managing dataset requirements - Implementing facial recognition while balancing accuracy, speed, and computational cost.\nWhat parts are likely to be tricky? - Comparing between the software packages, without making it too general or too detailed. - Finding research papers - Explaining legal and privacy concerns\nWhat resources are already available on this topic that may be helpful? Look for e.g. software vignettes, package documentation, papers about software packages, and so on. - Software documentations - Research papers - Pre trained models",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Needs Assessment</span>"
    ]
  },
  {
    "objectID": "task-analysis.html",
    "href": "task-analysis.html",
    "title": "Appendix C — Task Analysis",
    "section": "",
    "text": "C.1 Additional Guidance\nHere are some questions to guide you through the process of doing a task analysis. You don’t have to specifically answer each one of these (and some may not apply), but they should get you started thinking in the right direction.\nWhat are the prerequisites, for both knowledge and e.g. software setup? - Understanding of machine and deep learning concepts, and some experience with python.\nWhat are the basic requirements for any data that the method is used on? - Are missing values allowed? - Should the data be confined within a certain range? Pixel should be normalized, and images should have a fixed resolution. - Does the data have to be approximately normally distributed? Dataset should be balance to avoid bias\nWhat are the basic components of the task? - Outline these in a bit more detail\nWhat decisions does the user need to be prepared to make on the fly? - Preprocessing Choices - Feature Selection - Hyperparameters - Performance vs. Efficiency\nWhat questions should the user ask of the “first draft” of the product? What adjustments may need to be made? - Does the model correctly recognize faces across different lighting conditions and angles? - How well does the method perform on a diverse set of faces?\nYour check-in should answer these basic questions (and similar concerns that apply more directly to your topic).\nOnce you’ve completed the check-in, you can use this section to jump-start an introduction/set-up/getting started section in your user guide. This document should remain as an appendix to your main report.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Task Analysis</span>"
    ]
  },
  {
    "objectID": "guide.html#motivation",
    "href": "guide.html#motivation",
    "title": "1  Facial Recognition User Guide",
    "section": "1.2 Motivation",
    "text": "1.2 Motivation\nWhen I first started learning about machine learning and deep learning, the vast amount of information on the subject available was overwhelming. Like many beginners, I struggled with knowing where to start, what tools to use, and how to apply my knowledge to navigating a project. I realized that many people face the same challenges I did. That’s why I decided to create this user guide.\nI wanted to build a resource that would help others who are just starting out in this field, particularly those who, like me, are eager to dive into a deep learning project but are unsure where to begin. This guide is designed to be accessible to beginners, offering clear explanations and step-by-step instructions. It’s not just for those who want to understand theory but for anyone who’s ready to start building and experimenting with machine learning models.\nMy goal is to provide a practical, hands-on resource for building real-world projects. This will help newcomers feel more confident in their ability to apply machine learning and deep learning concepts. By breaking down complex topics into manageable parts, anyone can start on their own deep learning journey and see the potential of these powerful technologies.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Facial Recognition User Guide</span>"
    ]
  },
  {
    "objectID": "guide.html#what-is-computer-vision",
    "href": "guide.html#what-is-computer-vision",
    "title": "1  Facial Recognition User Guide",
    "section": "1.3 What is Computer Vision?",
    "text": "1.3 What is Computer Vision?\nComputer vision is a subfield of computer science focused on giving machines the ability to interpret, understand, and analyze visual information. The goal of computer vision is to enable machines to mimic human vision, allowing them to ‘see’ and interpret their surroundings Learn Computer Vision Using OpenCV: With Deep Learning CNNs and RNNs (n.d.). While AI allows machines to think, computer vision specializes in allowing them to perceive, observe, and understand visual data Matsuzaka and Yashiro (2023). This process typically involves several key steps, such as data preprocessing, feature extraction, model selection, and model evaluation Balasubramanian et al. (2022).\n\n\n\nFigure 1. Relation between Artificial Intelligence, Machine Learning and Deep Learning, Computer Vision.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Facial Recognition User Guide</span>"
    ]
  },
  {
    "objectID": "guide.html#facial-recognition",
    "href": "guide.html#facial-recognition",
    "title": "1  Facial Recognition User Guide",
    "section": "1.4 Facial Recognition",
    "text": "1.4 Facial Recognition\nThe face is a key element of human identity, serving as a unique identifier and revealing characteristics such as emotions and age. These features are important for recognition, allowing identification based on facial structure and expressions. Facial recognition technology has numerous practical applications, including bank card identification, access control, mugshot searches, security monitoring, and surveillance systems Zhao et al. (2003).\nTo better understand how these applications work, let’s explore the key steps involved in facial recognition, as illustrated in Figure 2 and explained below.\n\n\n\nFigure 2. Key steps of Facial Recognition. Kaur et al. (2020)\n\n\n\nImage Capture:\n\nThe probe image, or the initial photograph used for recognition, is captured using a still camera or CCTV, either with or without the subject’s knowledge.\n\nFace Detection:\n\nIn this step, the system identifies and isolates the face from the rest of the image, allowing it to focus on the relevant facial features for further analysis.\n\nFeature Extraction:\n\nKey facial features, such as the distance between the eyes or the shape of the nose, are extracted from the detected face for comparison with database images.\nThis process creates a unique face template for identification.\n\nMatching:\n\nThe generated face template is compared with images in a database. If the features match, the individual’s identity is verified.\nThis step is crucial for ensuring accurate identification in practical applications.\n\nIdentification:\n\nThe final step involves either verifying the individual’s identity (1:1 comparison) or identifying them from a larger database (1:N comparison).\nThis step is important for confirming or recognizing the person in real-world scenarios.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Facial Recognition User Guide</span>"
    ]
  },
  {
    "objectID": "guide.html#comparison-of-software-packages-libraries",
    "href": "guide.html#comparison-of-software-packages-libraries",
    "title": "1  Facial Recognition User Guide",
    "section": "1.5 Comparison of Software Packages & Libraries",
    "text": "1.5 Comparison of Software Packages & Libraries\n\nOpenCV\nThe name OpenCV comes from “open-source computer vision” Hasan and Sallow (2021). The OpenCV library is widely known as one of the most accessible tools for facial recognition with Python Kumari Sirivarshitha et al. (2023). It is well-suited for a variety of computer vision tasks, including object tracking, image processing, and transformations like resizing and filtering Learn Computer Vision Using OpenCV: With Deep Learning CNNs and RNNs (n.d.).\nWhen using OpenCV for facial recognition, the performance and accuracy depend heavily on the quality of the training data. Low-quality images can lead to detection failures, and an excessive number of categories in the training data may cause slower processing times Gupta and Garg (n.d.). Despite these challenges, OpenCV is generally efficient for real-time applications. However, it does require large datasets when working with deep learning models. Advanced features often require additional setup and integration with deep learning frameworks like TensorFlow or PyTorch “(PDF) Comparative Approach for Face Detection in Python, OpenCV and Hardware” (n.d.). Fortunately, it is relatively easy to implement, thanks to its large community and extensive documentation. Furthermore, OpenCV is optimized for low-memory environments, making it ideal for resource-constrained devices such as smartphones and embedded systems Singh et al. (2022).\nTensorFlow/Keras\nTensorFlow is a deep learning framework, while Keras is a high-level API built on top of TensorFlow, often used together for developing deep learning models. These tools are ideal for handling large-scale datasets and can leverage GPUs and TPUs to accelerate computations Abadi et al. (2016).\nTensorFlow/Keras offers high flexibility in building custom models, particularly Convolutional Neural Networks (CNNs), which are commonly used in image-related tasks LeCun, Bengio, and Hinton (2015). However, their performance depends heavily on the quality and size of the dataset. Models require large amounts of labeled data to train effectively, and the ability to generalize and avoid overfitting is directly influenced by both the quantity and quality of this data Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition (n.d.). Therefore, TensorFlow/Keras is best suited for applications with access to large, well-labeled datasets.\nIn addition to data requirements, TensorFlow/Keras also demands a solid understanding of deep learning concepts such as layers, optimizers, and loss functions (modiFlowPMDistributedTensorFlow202?). Although Keras simplifies many tasks with its high-level API, implementing advanced features still requires a deep understanding of the underlying principles. Training deep learning models on large datasets is computationally expensive and often requires GPUs or TPUs for efficient processing “Deep Learning with Python” (n.d.). This can significantly increase the time required for training and the resources needed, making TensorFlow/Keras less suitable for resource-constrained environments.\nScikit-learn\nScikit-learn is a beginner-friendly machine learning library that offers simple and efficient tools for data mining and analysis. It includes popular machine learning algorithms, such as classification, regression, and clustering. Thanks to its integration with Python, it’s easy to use and accessible, making it a great starting point for new users. Plus, scikit-learn comes with helpful documentation and examples to guide you as you learn “Developer’s Guide” (n.d.).\nScikit-learn achieves high performance through two main optimizations:\n\nReduced Memory Usage: It avoids unnecessary data copies, speeding up calculations and reducing processing time by up to 40%.\nEfficiency with Large Datasets: Scikit-learn optimizes the underlying libsvm library (used for support vector machines) to handle large datasets more efficiently “(PDF) Scikit-learn: Machine Learning in Python” (2024).\n\nWhile scikit-learn is ideal for small and medium-sized datasets, it can be less efficient with very large datasets compared to libraries designed for handling big data, like TensorFlow or PyTorch Machine Learning with PyTorch and Scikit-Learn (n.d.). However, scikit-learn’s strength lies in its ease of implementation. Its simple API lets users set up and run machine learning models without needing in-depth knowledge of machine learning concepts.\nIn terms of computational efficiency, scikit-learn is well-suited for systems with limited memory and is optimized for resource-constrained environments. However, for large datasets or complex tasks like deep learning, you might need additional resources or consider integrating scikit-learn with other tools, such as TensorFlow or PyTorch, for better performance",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Facial Recognition User Guide</span>"
    ]
  },
  {
    "objectID": "guide.html#choosing-the-right-approach",
    "href": "guide.html#choosing-the-right-approach",
    "title": "1  Facial Recognition User Guide",
    "section": "1.6 Choosing the Right Approach",
    "text": "1.6 Choosing the Right Approach\nWhen building computer vision systems, one of the first decisions you’ll face is whether to use traditional image processing techniques or deep learning models. The choice depends on factors like the size of your dataset, the computational power available, and the level of accuracy needed. Each approach has its strengths. For example, imagine you’re building a system to recognize faces in images. If you only have a small set of images, traditional techniques might be enough. However, if you have thousands of images or need to detect faces in different lighting and angles, deep learning would likely be the better choice.\nIn this section, we’ll explore when deep learning is the best choice and when traditional techniques might be more practical. We’ll also discuss how to select the most suitable model based on dataset size, computational resources, and the accuracy your project demands. Below is a decision tree illustration in Figure 3 for your reference.\n\n\n\nFigure 3. Decision Tree: When to Use Deep Learning vs. Traditional Computer Vision Techniques\n\n\n\nWhen to Use Deep Learning vs Traditional Computer Vision Techniques:\n\nWhen building computer vision systems, you’ll often need to decide whether to use deep learning models or traditional image processing techniques.\n\nUse deep learning when:\n\nYou have a large dataset (hundreds or thousands of images).\nThe task is complex and requires high accuracy, such as recognizing faces in various lighting conditions or detecting multiple objects in an image LeCun, Bengio, and Hinton (2015).\nYou need to handle variations in the data, like changes in angle or background. Deep learning models like Convolutional Neural Networks (CNNs) excel at recognizing complex patterns in data Goodfellow, Bengio, and Courville (2016).\n\nUse traditional techniques when:\n\nYou have a smaller dataset (fewer images).\nYour project requires faster processing and lower resource usage. Traditional methods like Haar cascades are quicker to set up and run, but they may not be as accurate, especially in challenging conditions like poor lighting or strange angles Lowe (2004).\nYou’re working with limited computational resources.\n\n\nIn some cases, a hybrid approach, using both traditional methods and deep learning can be the best of both worlds Yafouz et al. (2021). For instance, you might use traditional methods to quickly find faces in images and then apply deep learning to identify specific emotions or age Viola and Jones (2001).\n\nChoosing the Best Model Based on Dataset Size, Computational Resources, and Accuracy Needs:\n\nWhen selecting a model for your project, there are three key factors to consider: the size of your dataset, the computational power of your system, and the accuracy you require. Here’s a simple guide on how to choose the right model based on these factors:\n\nSmall Dataset & Limited Resources:\nIf you have a small dataset and limited computational power, traditional image processing techniques are often the best option. These methods, like Haar cascades in OpenCV, feature-based methods, or simple machine learning models in Scikit-learn, are quick to implement and run efficiently. While they may not handle complex variations such as changing lighting or backgrounds, they are great for simpler tasks like face detection or object recognition when you have limited data.\nLarge Dataset & Adequate Resources:\nIf you have a large dataset and access to more computational resources, deep learning models like Convolutional Neural Networks (CNNs) are ideal. Deep learning models excel at learning complex patterns and can process large and varied datasets like images with different lighting, angles, or backgrounds. These models do require more time to train and more computing power, but they offer much higher accuracy, especially for complex tasks.\nReal-Time Applications:\nIf your project requires processing data in real time, such as detecting faces in a video feed or tracking objects live, the efficiency of your computer becomes crucial. Traditional methods like Haar cascades are fast and lightweight, making them perfect for quick processing Viola and Jones (2001). However, if you need more accuracy, you can use lightweight deep learning models optimized for speed without sacrificing too much accuracy.\n\nIn general, deep learning excels at handling complex tasks, particularly when working with large datasets and requiring high accuracy. On the other hand, traditional computer vision methods are still effective for simpler tasks, especially in situations where the dataset is small or computational resources are limited. The decision to use deep learning or traditional techniques ultimately depends on factors such as the size of your dataset, the available computational power, and the accuracy your project demands.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Facial Recognition User Guide</span>"
    ]
  },
  {
    "objectID": "guide.html#next-steps",
    "href": "guide.html#next-steps",
    "title": "1  Facial Recognition User Guide",
    "section": "1.7 Next Steps",
    "text": "1.7 Next Steps\n\n\n\n\nBalasubramanian, Saravana Balaji, Jagadeesh Kannan R, Prabu P, Venkatachalam K, and Pavel Trojovský. 2022. “Deep Fake Detection Using Cascaded Deep Sparse Auto-Encoder for Effective Feature Selection.” PeerJ Computer Science 8 (July): e1040. https://doi.org/10.7717/peerj-cs.1040.\n\n\nKaur, Paramjit, Kewal Krishan, Suresh K. Sharma, and Tanuj Kanchan. 2020. “Facial-Recognition Algorithms: A Literature Review.” Medicine, Science and the Law 60 (2): 131–39. https://doi.org/10.1177/0025802419893168.\n\n\nLearn Computer Vision Using OpenCV: With Deep Learning CNNs and RNNs. n.d. Accessed March 11, 2025. https://learning.oreilly.com/library/view/learn-computer-vision/9781484242612/.\n\n\nMatsuzaka, Yasunari, and Ryu Yashiro. 2023. “AI-Based Computer Vision Techniques and Expert Systems.” AI 4 (1, 1): 289–302. https://doi.org/10.3390/ai4010013.\n\n\nZhao, W., R. Chellappa, P. J. Phillips, and A. Rosenfeld. 2003. “Face Recognition: A Literature Survey.” ACM Comput. Surv. 35 (4): 399–458. https://doi.org/10.1145/954339.954342.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Facial Recognition User Guide</span>"
    ]
  },
  {
    "objectID": "guide.html#conclusion-and-getting-started-with-your-project",
    "href": "guide.html#conclusion-and-getting-started-with-your-project",
    "title": "1  Facial Recognition User Guide",
    "section": "1.7 Conclusion and Getting Started with Your Project",
    "text": "1.7 Conclusion and Getting Started with Your Project\nBuilding a computer vision system involves a lot of decisions, but with the right approach, tools, and mindset, you can achieve great results. By understanding when to use deep learning versus traditional computer vision techniques and knowing how to choose the best model for your dataset, computational resources, and accuracy needs, you are well on your way to mastering the fundamentals of machine learning.\nRemember, every project is an opportunity to learn. If you’re just getting started, Scikit-learn is an excellent first tool for tackling smaller projects like basic face detection or image classification. If you’re ready to dive into deep learning, TensorFlow/Keras offers the flexibility and power needed to build complex models like Convolutional Neural Networks (CNNs). For real-time applications or if you’re working with limited resources, OpenCV will allow you to implement efficient solutions quickly.\nNext steps:\n\nTry a beginner project: Start with a simple image classification task using Scikit-learn. It’s a great way to practice the basics before moving to more complex models.\nTake on a deep learning challenge: Once you’re comfortable, dive into TensorFlow/Keras for a project like facial recognition or object detection.\nExperiment with OpenCV: For real-time applications, try building a basic face detection system using Haar cascades and see how it performs.\n\nFor further resources, check out these official documentation sites:\n\nScikit-learn Documentation: Excellent for understanding basic machine learning concepts.\nTensorFlow Documentation: Dive deeper into deep learning models with detailed guides and tutorials.\nOpenCV Documentation: Learn about efficient image processing and real-time computer vision tasks.\n\nIf you ever get stuck, don’t hesitate to seek help from the community. Platforms like Stack Overflow, Reddit’s r/MachineLearning, and Kaggle are full of people who were once beginners like you, and they are ready to offer advice and support.\nGood luck on your journey into machine learning, and remember, learning to build powerful models takes time, practice, and persistence. Keep experimenting and exploring, and most importantly, have fun!\n\n\n\n\nAbadi, Martín, Ashish Agarwal, Paul Barham, Eugene Brevdo, Zhifeng Chen, Craig Citro, Greg S. Corrado, et al. 2016. “TensorFlow: Large-Scale Machine Learning on Heterogeneous Distributed Systems.” March 16, 2016. https://doi.org/10.48550/arXiv.1603.04467.\n\n\nBalasubramanian, Saravana Balaji, Jagadeesh Kannan R, Prabu P, Venkatachalam K, and Pavel Trojovský. 2022. “Deep Fake Detection Using Cascaded Deep Sparse Auto-Encoder for Effective Feature Selection.” PeerJ Computer Science 8 (July): e1040. https://doi.org/10.7717/peerj-cs.1040.\n\n\n“Deep Learning with Python.” n.d. Manning Publications. Accessed March 12, 2025. https://www.manning.com/books/deep-learning-with-python.\n\n\n“Developer’s Guide.” n.d. scikit-learn. Accessed March 12, 2025. https://scikit-learn/stable/developers/index.html.\n\n\nGoodfellow, Ian, Yoshua Bengio, and Aaron Courville. 2016. Deep Learning. MIT Press.\n\n\nGupta, Manisa, and Kuchi Garg. n.d. “Identifying Study On Object Detection Using Computer Vision OpenCV Techniques.”\n\n\nHands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition. n.d. Accessed March 12, 2025. https://learning.oreilly.com/library/view/hands-on-machine-learning/9781492032632/.\n\n\nHasan, Ramadan TH, and Amira Bibo Sallow. 2021. “Face Detection and Recognition Using OpenCV.” Journal of Soft Computing and Data Mining 2 (2, 2): 86–97. https://publisher.uthm.edu.my/ojs/index.php/jscdm/article/view/8791.\n\n\nKaur, Paramjit, Kewal Krishan, Suresh K. Sharma, and Tanuj Kanchan. 2020. “Facial-Recognition Algorithms: A Literature Review.” Medicine, Science and the Law 60 (2): 131–39. https://doi.org/10.1177/0025802419893168.\n\n\nKumari Sirivarshitha, Ainampudi, Kadavakollu Sravani, Kothamasu Santhi Priya, and Vasantha Bhavani. 2023. “An Approach for Face Detection and Face Recognition Using OpenCV and Face Recognition Libraries in Python.” In 2023 9th International Conference on Advanced Computing and Communication Systems (ICACCS), 1:1274–78. https://doi.org/10.1109/ICACCS57279.2023.10113066.\n\n\nLearn Computer Vision Using OpenCV: With Deep Learning CNNs and RNNs. n.d. Accessed March 11, 2025. https://learning.oreilly.com/library/view/learn-computer-vision/9781484242612/.\n\n\nLeCun, Yann, Yoshua Bengio, and Geoffrey Hinton. 2015. “Deep Learning.” Nature 521 (7553): 436–44. https://doi.org/10.1038/nature14539.\n\n\nLowe, David G. 2004. “Distinctive Image Features from Scale-Invariant Keypoints.” International Journal of Computer Vision 60 (2, 2): 91–110. https://doi.org/10.1023/B:VISI.0000029664.99615.94.\n\n\nMachine Learning with PyTorch and Scikit-Learn. n.d. Accessed March 12, 2025. https://learning.oreilly.com/library/view/machine-learning-with/9781801819312/.\n\n\nMatsuzaka, Yasunari, and Ryu Yashiro. 2023. “AI-Based Computer Vision Techniques and Expert Systems.” AI 4 (1, 1): 289–302. https://doi.org/10.3390/ai4010013.\n\n\n“(PDF) Comparative Approach for Face Detection in Python, OpenCV and Hardware.” n.d. ResearchGate. Accessed March 11, 2025. https://www.researchgate.net/publication/372724858_Comparative_Approach_for_Face_Detection_in_Python_OpenCV_and_Hardware.\n\n\n“(PDF) Scikit-learn: Machine Learning in Python.” 2024. ResearchGate, December. https://www.researchgate.net/publication/51969319_Scikit-learn_Machine_Learning_in_Python.\n\n\nSingh, Gurpreet, Ishika Gupta, Jaspreet Singh, and Navneet Kaur. 2022. “Face Recognition Using Open Source Computer Vision Library (OpenCV) with Python.” In 2022 10th International Conference on Reliability, Infocom Technologies and Optimization (Trends and Future Directions) (ICRITO), 1–6. https://doi.org/10.1109/ICRITO56286.2022.9964836.\n\n\nViola, P., and M. Jones. 2001. “Rapid Object Detection Using a Boosted Cascade of Simple Features.” In Proceedings of the 2001 IEEE Computer Society Conference on Computer Vision and Pattern Recognition. CVPR 2001, 1:I–. https://doi.org/10.1109/CVPR.2001.990517.\n\n\nYafouz, Ayman, Ali Najah Ahmed, Nur’atiah Zaini, Mohsen Sherif, Ahmed Sefelnasr, and Ahmed El-Shafie. 2021. “Hybrid Deep Learning Model for Ozone Concentration Prediction: Comprehensive Evaluation and Comparison with Various Machine and Deep Learning Algorithms.” Engineering Applications of Computational Fluid Mechanics 15 (1): 902–33. https://doi.org/10.1080/19942060.2021.1926328.\n\n\nZhao, W., R. Chellappa, P. J. Phillips, and A. Rosenfeld. 2003. “Face Recognition: A Literature Survey.” ACM Comput. Surv. 35 (4): 399–458. https://doi.org/10.1145/954339.954342.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Facial Recognition User Guide</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Abadi, Martín, Ashish Agarwal, Paul Barham, Eugene Brevdo, Zhifeng Chen,\nCraig Citro, Greg S. Corrado, et al. 2016.\n“TensorFlow: Large-Scale Machine\nLearning on Heterogeneous Distributed\nSystems.” March 16, 2016. https://doi.org/10.48550/arXiv.1603.04467.\n\n\nBalasubramanian, Saravana Balaji, Jagadeesh Kannan R, Prabu P,\nVenkatachalam K, and Pavel Trojovský. 2022. “Deep Fake Detection\nUsing Cascaded Deep Sparse Auto-Encoder for Effective Feature\nSelection.” PeerJ Computer Science 8 (July): e1040. https://doi.org/10.7717/peerj-cs.1040.\n\n\n“Deep Learning with Python.” n.d.\nManning Publications. Accessed March 12, 2025. https://www.manning.com/books/deep-learning-with-python.\n\n\n“Developer’s Guide.” n.d. scikit-learn.\nAccessed March 12, 2025. https://scikit-learn/stable/developers/index.html.\n\n\nGoodfellow, Ian, Yoshua Bengio, and Aaron Courville. 2016. Deep\nLearning. MIT Press.\n\n\nGupta, Manisa, and Kuchi Garg. n.d. “Identifying Study On\nObject Detection Using Computer Vision OpenCV Techniques.”\n\n\nHands-On Machine Learning with\nScikit-Learn, Keras, and\nTensorFlow, 2nd Edition. n.d. Accessed\nMarch 12, 2025. https://learning.oreilly.com/library/view/hands-on-machine-learning/9781492032632/.\n\n\nHasan, Ramadan TH, and Amira Bibo Sallow. 2021. “Face\nDetection and Recognition Using\nOpenCV.” Journal of Soft Computing and Data\nMining 2 (2, 2): 86–97. https://publisher.uthm.edu.my/ojs/index.php/jscdm/article/view/8791.\n\n\nKaur, Paramjit, Kewal Krishan, Suresh K. Sharma, and Tanuj Kanchan.\n2020. “Facial-Recognition Algorithms: A Literature\nReview.” Medicine, Science and the Law 60 (2): 131–39.\nhttps://doi.org/10.1177/0025802419893168.\n\n\nKumari Sirivarshitha, Ainampudi, Kadavakollu Sravani, Kothamasu Santhi\nPriya, and Vasantha Bhavani. 2023. “An Approach for Face\nDetection and Face Recognition Using\nOpenCV and Face Recognition Libraries in\nPython.” In 2023 9th International\nConference on Advanced Computing and\nCommunication Systems (ICACCS),\n1:1274–78. https://doi.org/10.1109/ICACCS57279.2023.10113066.\n\n\nLearn Computer Vision Using OpenCV: With Deep\nLearning CNNs and RNNs. n.d. Accessed March 11,\n2025. https://learning.oreilly.com/library/view/learn-computer-vision/9781484242612/.\n\n\nLeCun, Yann, Yoshua Bengio, and Geoffrey Hinton. 2015. “Deep\nLearning.” Nature 521 (7553): 436–44. https://doi.org/10.1038/nature14539.\n\n\nLowe, David G. 2004. “Distinctive Image Features from\nScale-Invariant Keypoints.” International\nJournal of Computer Vision 60 (2, 2): 91–110. https://doi.org/10.1023/B:VISI.0000029664.99615.94.\n\n\nMachine Learning with PyTorch and\nScikit-Learn. n.d. Accessed March 12, 2025. https://learning.oreilly.com/library/view/machine-learning-with/9781801819312/.\n\n\nMatsuzaka, Yasunari, and Ryu Yashiro. 2023. “AI-Based\nComputer Vision Techniques and Expert\nSystems.” AI 4 (1, 1): 289–302. https://doi.org/10.3390/ai4010013.\n\n\n“(PDF) Comparative Approach for\nFace Detection in Python, OpenCV\nand Hardware.” n.d. ResearchGate. Accessed March 11,\n2025. https://www.researchgate.net/publication/372724858_Comparative_Approach_for_Face_Detection_in_Python_OpenCV_and_Hardware.\n\n\n“(PDF) Scikit-learn:\nMachine Learning in Python.” 2024.\nResearchGate, December. https://www.researchgate.net/publication/51969319_Scikit-learn_Machine_Learning_in_Python.\n\n\nSingh, Gurpreet, Ishika Gupta, Jaspreet Singh, and Navneet Kaur. 2022.\n“Face Recognition Using Open Source Computer\nVision Library (OpenCV) with\nPython.” In 2022 10th International\nConference on Reliability, Infocom\nTechnologies and Optimization (Trends\nand Future Directions) (ICRITO), 1–6. https://doi.org/10.1109/ICRITO56286.2022.9964836.\n\n\nViola, P., and M. Jones. 2001. “Rapid Object Detection Using a\nBoosted Cascade of Simple Features.” In Proceedings of the\n2001 IEEE Computer Society Conference on Computer\nVision and Pattern Recognition. CVPR\n2001, 1:I–. https://doi.org/10.1109/CVPR.2001.990517.\n\n\nYafouz, Ayman, Ali Najah Ahmed, Nur’atiah Zaini, Mohsen Sherif, Ahmed\nSefelnasr, and Ahmed El-Shafie. 2021. “Hybrid Deep Learning Model\nfor Ozone Concentration Prediction: Comprehensive Evaluation and\nComparison with Various Machine and Deep Learning Algorithms.”\nEngineering Applications of Computational Fluid Mechanics 15\n(1): 902–33. https://doi.org/10.1080/19942060.2021.1926328.\n\n\nZhao, W., R. Chellappa, P. J. Phillips, and A. Rosenfeld. 2003.\n“Face Recognition: A Literature Survey.”\nACM Comput. Surv. 35 (4): 399–458. https://doi.org/10.1145/954339.954342.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "User Guide: Annual Review Article Topic",
    "section": "",
    "text": "Assignment Flow\nThis project is set up to scaffold this user guide and set you up for success.\nStart at topic.qmd and identify a topic for your user guide.\nOnce you’ve proposed a topic and received my approval/feedback, you can convert the contents of topic.qmd into an introductory paragraph in your report. Please leave the topic.qmd file as an appendix, to document the different stages of this project.\nOnce we’ve agreed on a topic for your user guide, you will proceed to needs.qmd and task-analysis.qmd. Both will be submitted at the same check-in, and both will be included in your final report as appendices. You should be able to re-purpose most of the information in task-analysis.qmd to orient the user to different components of the task you’ve chosen.\nYour next step is to actually write the content that satisfies the work you outlined in task-analysis.qmd.\nOnce you’re finished with that, ideally, you’ll have plenty of time to edit and streamline your report. Feel free to trade reports with a friend and try to complete your friend’s task - this will help you both identify areas where the guide isn’t as clear. Try to complete the task with a different data set - that often helps find trouble spots.\nWhen you submit your final report, you may remove index.qmd from the _quarto.yml file, which will remove this chapter (which is quite unnecessary for your user) from the report. You should also take the time to make sure your name is listed as both author and copyright holder in the _quarto.yml file. Feel free to make a custom cover for your manual if you would like to do so. You can also tweak the CSS/theme for the book, so long as you’re conscious of accessibility concerns.\n\n\n\n\n\n\nBuilding the report\n\n\n\nIf you are using RStudio to complete this report, you can hit (Ctrl/Cmd)-Shift-B to build the whole report. You can also type quarto render . on the command line in the project folder to accomplish the same thing.\nIf you have questions about how to customize or debug your book, it may be helpful to start at the quarto book documentation (Posit PBC 2024).\n\n\n\n\n\n\nPosit PBC. 2024. “Creating a Book. Quarto.” July 1, 2024. https://quarto.org/docs/books/.",
    "crumbs": [
      "Assignment Flow"
    ]
  }
]